/**
 * NOTE: This class is auto generated by the swagger code generated program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import io.swagger.generated.model.ShareInfo;
import io.swagger.generated.model.WechatShareInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-30T12:10:50.957Z")

@Api(value = "shareInfo", description = "the shareInfo API")
public interface ShareInfoApi {

    Logger log = LoggerFactory.getLogger(ShareInfoApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "generate the share url for individual.", nickname = "shareInfoPost", notes = "", response = String.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "valid response.", response = String.class),
        @ApiResponse(code = 400, message = "parameter error."),
        @ApiResponse(code = 405, message = "method not allow.") })
    @RequestMapping(value = "/shareInfo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> shareInfoPost(@ApiParam(value = "generate the share url for individual.",required=true) @RequestBody String openId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    Map<String, String> map = new HashMap<>();
                    map.put("url", "http://www.mkmg.com/static/share/abcdefghijklmnopqrstuvwxyz");
                    return new ResponseEntity<>(getObjectMapper().get().writeValueAsString(map), HttpStatus.NOT_IMPLEMENTED);
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"http://www.mkmg.com/static/share/abcdefghijklmnopqrstuvwxyz\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShareInfoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @ApiOperation(value = "get the wechat shareInfo for sharing.", nickname = "wechatShareInfo", notes = "", response = WechatShareInfo.class, tags={ "share", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "valid response.", response = WechatShareInfo.class),
            @ApiResponse(code = 400, message = "parameter error."),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 403, message = "Forbidden"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 405, message = "method not allow.") })
    @RequestMapping(value = "/wechatShareInfo/{openId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<WechatShareInfo> wechatShareInfo(@ApiParam(value = "get wechat share basic info", required = true) @PathVariable("openId") String openId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return ResponseEntity.ok(new WechatShareInfo("this is a test title for wechat share", "this is the desc for wechat share", "link.test.com", "img.test.com"));
                } catch (Exception e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShareInfoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @ApiOperation(value = "get the shareInfo for sharing.", nickname = "shareInfoGet", notes = "", response = ShareInfo.class, tags={ "share", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "valid response.", response = ShareInfo.class),
            @ApiResponse(code = 400, message = "parameter error."),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 403, message = "Forbidden"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 405, message = "method not allow.") })
    @RequestMapping(value = "/shareInfo/{openId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<ShareInfo> shareInfoGet(@ApiParam(value = "get the shareInfo for sharing.",required=true) @PathVariable("openId") String openId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"shareToId\" : \"abcdefghijklmnopqrstuvwxyz\",  \"productId\" : 123,  \"createTime\" : \"2018-09-24 21:47:00\",  \"openId\" : \"abcdefghijklmnopqrstuvwxyz\",  \"updateTime\" : \"updateTime\",  \"id\" : \"120000\",  \"url\" : \"http://www.test.com\",  \"status\" : \"1\"}", ShareInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShareInfoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
